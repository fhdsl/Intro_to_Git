---
title: "Intro to Git"
format: 
  revealjs:
    smaller: true
    scrollable: true
---

## Intro to Git

![](images/Git.png)

## Introductions

-   Who am I?

. . .

-   What is DaSL?

. . .

-   Who are you?

    -   Name, pronouns, group you work in

    -   What brought you here?


## Goals of the workshop

. . .

-   Understand the need for version control.

. . .

-   Be able to describe Git's data model.

. . .

-   How to change a file from Modified, Staged, and Committed states in the command line.

. . .

-   How to connect Git with GitHub.

## Why version control?

. . .

"Version control is a system that records changes to a set of files over time so that you can recall specific versions later."

. . .

![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQTDzi606UzrbRCCuTBOQBGfpOuDVqlEgJHwkQ_gusPVA0gPsbS76gAGOMPiLEkq4OW6yI&usqp=CAU)

. . .

![](images/git_motivation.png){width="400"}

## Git, notoriously

![](https://imgs.xkcd.com/comics/git.png)

## Git's Data Model

. . .

-   Git keeps track of a project within a designated directory, which is called a **repository** (also known as **repo**).

. . .

-   You can save the state of your repository by making a **commit**: Git will save the repository's **directory tree**, a link to the previous commit, and metadata.

. . .

![](https://git-scm.com/book/en/v2/images/snapshots.png)

## Git's Data Model with "branching" and "merging"

. . .

Linear:

```         
o <-- o <-- o <-- o
```

. . .

Branching:

```         
o <-- o <-- o <-- o
            ^
             \
              --- o <-- o
```

. . .

Branching and Merging:

```         
o <-- o <-- o <-- o <---- o
            ^            /
             \          v
              --- o <-- o
```

## Set up

1.  Login to your GitHub account: https://github.com/login

. . .

2.  Create a Replit account and "fork" this project: https://replit.com/@ChrisLo6/GitAndGitHubDaSL

. . .

4.  In your Replit shell,

```         
sh setup.sh
```

You will be asked how you want to log in, and pick the following:

```         
? What account do you want to log into? GitHub.com
? What is your preferred protocol for Git operations? HTTPS
? Authenticate Git with your GitHub credentials? Yes
? How would you like to authenticate GitHub CLI? Login with a web browser
```

You will be given a code, and you will provide that code to GitHub via <https://github.com/login/device>.

## Create your first local repository

We create a local repository:

```         
mkdir sandbox
cd sandbox
git init
Initialized empty Git repository.
```

We look at its status:

```         
git status
On branch main

No commits yet

nothing to commit (create/copy files and use "git add" to track)
```

## Git's Staging Model

. . .

Once Git **tracks** your file, it can have 3 possible states:

. . .

-   **Modified** means that you have changed the file but have not committed it to your local repository yet.

. . .

-   **Staged** means that you have marked a modified file in its current version to go into your next commit.

. . .

-   **Committed** means that the data is safely stored in your local repository.

. . .

Why offer this intermediate staging ground?

. . .

-   Temporary or sensitive files

-   Not ready for a commit yet

## Making your first commit

. . .

Create a file:

```         
touch README
```

```         
git status
On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)
    README

nothing added to commit but untracked files present (use "git add" to track)
```

. . .

It hasn't been **tracked** yet. Add it to be tracked and **staged**.

```         
git add README 

git status
On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
    new file:   README
```

. . .

**Commit** it with a message:

```         
git commit -m "Added README"
[main bb926a2] Added README
 1 file changed, 1 insertion(+)
 create mode 100644 README
 
clo2@MGQQR2YQRT9 sandbox git status
On branch main
nothing to commit, working tree clean
```

## Staging model revisited

![](images/git_workflow1.svg)

## Exercises

-   Make some changes and make another commit by yourself.

-   Modify `README`, stage it via `git add`, and then modify `README` again. Look at `git status`. How can `README` file be staged and unstaged at the same time? What should you do?

-   Deleting a file: delete a committed file with `rm`. Then, look at `git status`. What do you need to do to commit this change? You will need to use the command `git rm`. Do the necessary steps and commit it.

-   Moving a file: Rename a committed file with `mv`. Then, look at `git status`. What do you need to do to commit this change? You will need to use the command `git rm`. Do the necessary steps and commit it. Repeat this exercise again with `git mv`. This should be easier.

## Git log

. . .

Let's take a look of the history of our repository by running `git log`:

```         
git log
commit 895508f4e36166ffdca046a3106e27b7f70f64c9 (HEAD -> master)
Author: Your Name <you@example.com>
Date:   Tue Oct 17 18:15:08 2023 +0000

    modified README

commit 5380f9550ad012f4f7806572590becd01ca75972
Author: Your Name <you@example.com>
Date:   Tue Oct 17 18:13:59 2023 +0000

    added README
```

. . .

You can look at a previous commit state by `git checkout [commit ID]`, and return to the latest state by `git checkout master`.

## Undoing

. . .

**Unstage a file**

You staged a file, and then realized you want to unstage it to "modified": `git restore --staged [fileName]`.

. . .

**Unmodify a file**

You have a file that's "modified". You are no longer interested and want to un-modify it back to the last commit: `git restore [fileName]`.

*Warning: This cannot be undone!*

. . .

**Revert a commit**

After several commits, you realized that you wanted to undo a specific commit: `git revert [commit identifier]`.

This will undo that commit. However, if the content of that commit has experienced intermediate changes, it will raise a conflict.

## Connecting to GitHub as a remote

. . .

**Remotes** are repositories hosted often on a server, such as GitHub, so that other people can access the the remote from their local computer.

. . .

We want to connect our local repository to the remote repository you just created: `git remote add [remote name] [Git remote URL]`

```         
git remote add origin https://github.com/caalo/sandbox.git
```

. . .

Let's **push** our commits to the remote:

```         
git branch -M main
git push -u origin main
Enumerating objects: 3, done.
Counting objects: 100(3/3), done.
Writing objects: 100(3/3), 218 bytes | 218.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/caalo/sandbox.git
 * [new branch]      main -> main
```

## Staging model revisited

![](images/git_workflow2.svg)

## Commit before Push

Now, everything is synced up between our local repository and the remote repository.

```         
git log
commit 895508f4e36166ffdca046a3106e27b7f70f64c9 (HEAD -> main, origin/main)
Author: Your Name <you@example.com>
Date:   Tue Oct 17 18:15:08 2023 +0000

    modified README

commit 5380f9550ad012f4f7806572590becd01ca75972
Author: Your Name <you@example.com>
Date:   Tue Oct 17 18:13:59 2023 +0000

    added README
```

. . .

If you make a new commit, but don't push it yet, what happens?


## Other ways of interacting with Git and GitHub

-   [GitHub Desktop](https://desktop.github.com/)

-   [RStudio with usethis package](https://hutchdatascience.org/Tools_for_Reproducible_Workflows_in_R/using-github-in-a-workflow.html)

-   [GitKraken](https://www.gitkraken.com/)

**A nice troubleshooting guide**

[DangItGit](https://dangitgit.com/en)
